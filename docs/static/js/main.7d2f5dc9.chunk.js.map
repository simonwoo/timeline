{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","react_default","a","createElement","className","class","dist","lineColor","key","dateText","style","color","href","textDecoration","margin","src","width","paddingTop","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mMA0EeA,MArEf,WACE,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAKE,MAAM,gBACXJ,EAAAC,EAAAC,cAAA,OAAKE,MAAM,kBACTJ,EAAAC,EAAAC,cAAA,QAAME,MAAM,QAAZ,YACAJ,EAAAC,EAAAC,cAAA,QAAME,MAAM,SAAZ,8BAGJJ,EAAAC,EAAAC,cAACG,EAAA,SAAD,CAAUC,UAAW,OAAQH,UAAU,gBACrCH,EAAAC,EAAAC,cAACG,EAAA,aAAD,CACEE,IAAI,MACJC,SAAS,oBACTC,MAAO,CAAEC,MAAO,YAEhBV,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGS,KAAK,uBAAuBF,MAAO,CAACG,eAAgB,OAAQF,MAAO,SAAtE,YACJV,EAAAC,EAAAC,cAAA,wDACAF,EAAAC,EAAAC,cAAA,OAAKO,MAAO,CAACI,OAAQ,WACnBb,EAAAC,EAAAC,cAAA,KAAGS,KAAK,8BAA8BF,MAAO,CAACG,eAAe,OAAQF,MAAO,SAA5E,kBACAV,EAAAC,EAAAC,cAAA,OAAKY,IAAI,uBAAuBL,MAAO,CAACM,MAAO,OAAQC,WAAY,OAGrEhB,EAAAC,EAAAC,cAAA,OAAKO,MAAO,CAACI,OAAQ,WACnBb,EAAAC,EAAAC,cAAA,KAAGS,KAAK,sCAAsCF,MAAO,CAACG,eAAe,OAAQF,MAAO,SAApF,kBACAV,EAAAC,EAAAC,cAAA,OAAKY,IAAI,uBAAuBL,MAAO,CAACM,MAAO,OAAQC,WAAY,OAGrEhB,EAAAC,EAAAC,cAAA,OAAKO,MAAO,CAACI,OAAQ,WACnBb,EAAAC,EAAAC,cAAA,KAAGS,KAAK,qCAAqCF,MAAO,CAACG,eAAe,OAAQF,MAAO,SAAnF,iBACAV,EAAAC,EAAAC,cAAA,OAAKY,IAAI,sBAAsBL,MAAO,CAACM,MAAO,OAAQC,WAAY,QAItEhB,EAAAC,EAAAC,cAACG,EAAA,aAAD,CACEE,IAAI,MACJC,SAAS,oBACTC,MAAO,CAAEC,MAAO,YAEhBV,EAAAC,EAAAC,cAAA,wDACAF,EAAAC,EAAAC,cAAA,wDACAF,EAAAC,EAAAC,cAAA,OAAKO,MAAO,CAACI,OAAQ,WACnBb,EAAAC,EAAAC,cAAA,KAAGS,KAAK,uBAAuBF,MAAO,CAACG,eAAe,OAAQF,MAAO,SAArE,4DACAV,EAAAC,EAAAC,cAAA,OAAKY,IAAI,aAAaL,MAAO,CAACM,MAAO,OAAQC,WAAY,OAE3DhB,EAAAC,EAAAC,cAAA,OAAKO,MAAO,CAACI,OAAQ,WACnBb,EAAAC,EAAAC,cAAA,KAAGS,KAAK,IAAIF,MAAO,CAACG,eAAe,OAAQF,MAAO,SAAlD,+CAEFV,EAAAC,EAAAC,cAAA,OAAKO,MAAO,CAACI,OAAQ,WACnBb,EAAAC,EAAAC,cAAA,KAAGS,KAAK,IAAIF,MAAO,CAACG,eAAe,OAAQF,MAAO,SAAlD,+BAIJV,EAAAC,EAAAC,cAACG,EAAA,aAAD,CACEE,IAAI,MACJC,SAAS,yBACTC,MAAO,CAAEC,MAAO,YAEhBV,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAAA,4CACAF,EAAAC,EAAAC,cAAA,OAAKO,MAAO,CAACI,OAAQ,WACnBb,EAAAC,EAAAC,cAAA,KAAGS,KAAK,IAAIF,MAAO,CAACG,eAAe,OAAQF,MAAO,SAAlD,iCCtDQO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7d2f5dc9.chunk.js","sourcesContent":["import React from 'react';\nimport { Timeline, TimelineItem } from 'vertical-timeline-component-for-react';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n        <div class=\"icon avatar\" />\n        <div class=\"name-and-title\">\n          <span class=\"name\">WU CHONG</span>\n          <span class=\"title\">Full stack web developer</span>\n        </div>\n      </header>\n      <Timeline lineColor={'#ddd'} className=\"app_timeline\">\n        <TimelineItem\n          key=\"001\"\n          dateText=\"2015.03 - 2017.01\"\n          style={{ color: '#e86971' }}\n        >\n          <h3><a href=\"https://restlet.com/\" style={{textDecoration: 'none', color: \"#333\"}}>Restlet</a></h3>\n          <h4>前端开发工程师</h4>\n          <div style={{margin: \"20px 0\"}}>\n            <a href=\"https://studio.restlet.com/\" style={{textDecoration:'none', color: \"#888\"}}>Restlet Studio</a>\n            <img src=\"./restlet-studio.png\" style={{width: \"100%\", paddingTop: 10}}/>\n          </div>\n\n          <div style={{margin: \"20px 0\"}}>\n            <a href=\"https://restlet.com/modules/client/\" style={{textDecoration:'none', color: \"#888\"}}>Restlet Client</a>\n            <img src=\"./restlet-client.png\" style={{width: \"100%\", paddingTop: 10}}/>\n          </div>\n\n          <div style={{margin: \"20px 0\"}}>\n            <a href=\"https://restlet.com/modules/cloud/\" style={{textDecoration:'none', color: \"#888\"}}>Restlet Cloud</a>\n            <img src=\"./restlet-cloud.png\" style={{width: \"100%\", paddingTop: 10}}/>\n          </div>\n        </TimelineItem>\n\n        <TimelineItem\n          key=\"002\"\n          dateText=\"2017.02 - 2018.06\"\n          style={{ color: '#e86971' }}\n        >\n          <h3>阿里巴巴大鱼号</h3>\n          <h4>前端开发工程师</h4>\n          <div style={{margin: \"20px 0\"}}>\n            <a href=\"https://mp.dayu.com/\" style={{textDecoration:'none', color: \"#888\"}}>大鱼号（PC端和Mobile端）</a>\n            <img src=\"./dayu.png\" style={{width: \"100%\", paddingTop: 10}}/>\n          </div>\n          <div style={{margin: \"20px 0\"}}>\n            <a href=\"/\" style={{textDecoration:'none', color: \"#888\"}}>大鱼号运营平台</a>\n          </div>\n          <div style={{margin: \"20px 0\"}}>\n            <a href=\"/\" style={{textDecoration:'none', color: \"#888\"}}>大鱼号C端</a>\n\n          </div>\n        </TimelineItem>\n        <TimelineItem\n          key=\"003\"\n          dateText=\"2018.06 - 至今\"\n          style={{ color: '#e86971' }}\n        >\n          <h3>广发证券</h3>\n          <h4>前端开发leader</h4>\n          <div style={{margin: \"20px 0\"}}>\n            <a href=\"/\" style={{textDecoration:'none', color: \"#888\"}}>投研平台</a>\n          </div>\n        </TimelineItem>\n      </Timeline>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}